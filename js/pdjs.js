// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.PDJSobj = (function() {
    function PDJSobj() {
      this.update_things = __bind(this.update_things, this);
      this.attach_things = __bind(this.attach_things, this);
    }

    PDJSobj.version = 0.2;

    PDJSobj.server = 'pagerduty.dev';

    PDJSobj.protocol = "http";

    PDJSobj.req_count = 1;

    PDJSobj.req = function() {
      return PDJSobj.req_count++;
    };

    PDJSobj.prototype.set_token = function(token) {
      return this.token = token;
    };

    PDJSobj.prototype.set_subdomain = function(subdomain) {
      return this.subdomain = subdomain;
    };

    PDJSobj.prototype.update_service_incidents = function(service_id) {
      var params, since_date, until_date;
      until_date = new Date();
      since_date = new Date(until_date.getTime() - 90 * PDJStools.SECONDS_IN_A_DAY);
      params = {
        url: "https://" + this.subdomain + ".pagerduty.com/api/v1/incidents",
        type: "GET",
        headers: {
          Authorization: 'Token token=' + this.token
        },
        data: {
          status: "resolved",
          service: service_id,
          sort_by: 'created_on:desc',
          "since": since_date.toISOString(),
          "until": until_date.toISOString()
        },
        success: function(json) {
          var best_time, heroes, i, leader, max, results, t, total_time, worst_time, _i, _len, _ref;
          PDJStools.logg(json);
          heroes = {};
          total_time = 0;
          worst_time = 0;
          best_time = PDJStools.SECONDS_IN_A_DAY * 365;
          max = 0;
          leader = 'no-one';
          _ref = json.incidents;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            t = new Date(i.last_status_change_on) - new Date(i.created_on);
            worst_time = Math.max(worst_time, t);
            best_time = Math.min(best_time, t);
            total_time += t;
            heroes[i.last_status_change_by.name] = (heroes[i.last_status_change_by.name] || 0) + 1;
            if (heroes[i.last_status_change_by.name] > max) {
              max = heroes[i.last_status_change_by.name];
              leader = i.last_status_change_by.name;
            }
          }
          results = {
            best_time: PDJStools.timeAsWords(best_time),
            worst_time: PDJStools.timeAsWords(worst_time),
            total_time: PDJStools.timeAsWords(total_time),
            average_time: PDJStools.timeAsWords(total_time / json.incidents.length),
            uptime: (new String((1 - (total_time / (PDJStools.SECONDS_IN_A_DAY * 90))) * 100)).substr(0, 5),
            leader: leader,
            leader_resolves: max,
            heroes: heroes
          };
          $("#" + service_id + ".pdjs_service_incidents").html("The average incident takes " + results.average_time + " ( " + results.best_time + " - " + results.worst_time + " ) " + results.leader + " has resolved " + results.leader_resolves + " incidents");
          return results;
        }
      };
      PDJStools.logg(params);
      return $.ajax(params);
    };

    PDJSobj.prototype.open_service = function(me) {
      return window.open("https://" + this.subdomain + ".pagerduty.com/services/" + me.id);
    };

    PDJSobj.prototype.update_service = function(service_id) {
      PDJStools.logg("update_service: " + service_id + " at " + this.subdomain);
      return this.api({
        res: "services/" + service_id,
        success: (function(_this) {
          return function(json) {
            var desc, status;
            status = "resolved";
            if (json.service.incident_counts.acknowledged) {
              status = "acknowledged";
            }
            if (json.service.incident_counts.triggered) {
              status = "triggered";
            }
            if (json.service.status === "disabled") {
              status = "disabled";
            }
            if (_this.services[service_id] !== status) {
              desc = "Service: \"" + json.service.name + "\" was " + status + " as of " + PDJStools.timeUntil(json.service.last_incident_timestamp);
              $("#" + service_id + ".pdjs_service").removeClass("pdjs_triggered").removeClass("pdjs_acknowledged").removeClass("pdjs_resolved").removeClass("pdjs_disabled");
              $("#" + service_id + ".pdjs_service").attr("title", desc).addClass("pdjs_" + status);
              return _this.services[service_id] = status;
            }
          };
        })(this)
      });
    };

    PDJSobj.prototype.update_schedule = function(schedule_id) {
      PDJStools.logg("update_schedule: " + schedule_id);
      return this.api({
        res: "schedules/" + schedule_id + "/entries",
        data: {
          "overflow": "true",
          "since": (new Date()).toISOString(),
          "until": (new Date()).toISOString()
        },
        success: function(json) {
          var end, on_call, status;
          PDJStools.logg(json);
          on_call = json.entries[0];
          end = new Date(on_call.end);
          status = "<a href=\"https://pdt-dave.pagerduty.com/users/" + on_call.user.id + "\" target=\"_blank\">" + on_call.user.name + "</a> is on call for another " + PDJStools.timeUntil(end);
          return $("#" + schedule_id + ".pdjs_schedule").html(status);
        }
      });
    };

    PDJSobj.prototype.api = function(params) {
      PDJStools.logg("Call to API: ");
      PDJStools.logg(this);
      PDJStools.logg(params);
      params.url = params.url || PDJSobj.protocol + "://" + this.subdomain + "." + PDJSobj.server + "/api/v1/" + params.res;
      params.headers = params.headers || [];
      params.contentType = "application/json";
      params.data = params.data || [];
      params.data.PDJSversion = PDJSobj.version;
      params.data.request_count = PDJSobj.req();
      params.headers.Authorization = 'Token token=' + this.token;
      params.error = function(err) {
        PDJStools.logg("Error");
        PDJStools.logg(err.status);
        return PDJStools.logg(err.responseText);
      };
      PDJStools.logg(params);
      return $.ajax(params);
    };

    PDJSobj.prototype.attach_things = function(subdomain, token, refresh) {
      if (refresh == null) {
        refresh = 60;
      }
      this.subdomain = subdomain;
      this.token = token;
      this.refresh = refresh;
      this.services = {};
      return this.update_things();
    };

    PDJSobj.prototype.update_things = function() {
      var s, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      _ref = $(".pdjs_service_incidents");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        this.update_service_incidents(s.id);
      }
      _ref1 = $(".pdjs_service");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        s = _ref1[_j];
        this.update_service(s.id);
      }
      _ref2 = $(".pdjs_schedule");
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        s = _ref2[_k];
        _results.push(this.update_schedule(s.id));
      }
      return _results;
    };

    return PDJSobj;

  })();

  jQuery(function() {
    window.PDJS = new window.PDJSobj;
    PDJS.attach_things(pdjs_settings.subdomain, pdjs_settings.token, pdjs_settings.refresh);
    return window.PDJS.update_schedule("PQBSD51");
  });

  window.PDJStools = (function() {
    function PDJStools() {}

    PDJStools.SECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;

    PDJStools.logging = true;

    PDJStools.logg = function(str) {
      if (this.logging) {
        return console.log(str);
      }
    };

    PDJStools.timeUntil = function(time) {
      return this.timeBetween(time, new Date());
    };

    PDJStools.timeBetween = function(start, end) {
      var delta;
      if (typeof start === "string") {
        start = new Date(start);
      }
      if (typeof end === "string") {
        end = new Date(end);
      }
      delta = Math.abs(end - start);
      return this.timeAsWords(delta);
    };

    PDJStools.timeAsWords = function(delta) {
      var a, b, diffs, f, i, num, str;
      if (delta < 1000) {
        return "0 seconds";
      }
      diffs = [[1000, "millisecond"], [60, "second"], [60, "minute"], [24, "hour"], [7, "day"], [52, "week"], [99999, "year"]];
      f = this.SECONDS_IN_A_DAY * 7 * 52;
      str = "f: " + f;
      i = diffs.length - 1;
      num = (function() {
        var _results;
        _results = [];
        while (i -= 1) {
          if (delta > f) {
            a = Math.floor(delta / f);
            str = a + " " + diffs[i + 1][1];
            if (a > 1) {
              str += "s";
            }
            if (i > 0) {
              b = Math.floor((delta % f) / (f / diffs[i][0]));
              if (b > 0) {
                str = str + " and " + b + " " + diffs[i][1];
              }
              if (b > 1) {
                str += "s";
              }
            }
            delta = 0;
          }
          _results.push(f = f / diffs[i][0]);
        }
        return _results;
      })();
      return str;
    };

    return PDJStools;

  })();

  window.PDJSt = PDJStools;

  PDJStools.logg("test");

  window.PDJSobj = (function() {
    PDJSobj.version = "PDJS-0.4.5";

    PDJSobj.prototype.logg = function(str) {
      if (this.logging) {
        return console.log(str);
      }
    };

    PDJSobj.prototype.req = function() {
      return this.req_count++;
    };

    function PDJSobj(params) {
      if (params == null) {
        params = {};
      }
      this.subdomain = params.subdomain;
      this.token = params.token;
      this.refresh = params.refresh || 60;
      this.refresh_in_ms = this.refresh * 1000;
      this.protocol = params.protocol || "https";
      this.server = params.server || "pagerduty.com";
      this.logging = params.logging || false;
      this.req_count = 1;
      this.api_version = "v1";
      this.logg("Initializing PDJSobj");
    }

    PDJSobj.prototype.no_success_function = function(json, callerparams) {
      this.logg("no success function defined for " + callerparams.res);
      return this.logg(json);
    };

    PDJSobj.prototype.error_function = function(err, callerparams) {
      var anyerror, error_detail;
      console.log("Error for " + callerparams.res);
      console.log(err.status);
      error_detail = err.responseText;
      try {
        error_detail = JSON.parse(error_detail);
      } catch (_error) {
        anyerror = _error;
        this.logg("Not an JSON error");
      }
      return console.log(error_detail);
    };

    PDJSobj.prototype.api = function(params) {
      if (params == null) {
        params = {};
      }
      this.logg("Call to API: " + params.res);
      params.url = params.url || this.protocol + "://" + this.subdomain + "." + this.server + "/api/" + this.api_version + "/" + params.res;
      params.attempt = params.attempt || 0;
      params.headers = params.headers || {};
      params.contentType = "application/json; charset=utf-8";
      params.dataType = "json";
      params.data = params.data || {};
      params.data.PDJSversion = PDJSobj.version;
      params.data.request_count = this.req();
      params.data.attempt = params.attempt++;
      this.logg("params.data:");
      this.logg(params.data);
      params.type = (params.type || "GET").toUpperCase();
      if (params.type === "POST" || params.type === "POST") {
        params.data = JSON.stringify(params.data);
      }
      params.headers.Authorization = 'Token token=' + this.token;
      params.error = params.error || (function(_this) {
        return function(err) {
          return _this.error_function(err, params);
        };
      })(this);
      params.success = params.success || (function(_this) {
        return function(data) {
          return _this.no_success_function(data, params);
        };
      })(this);
      this.logg(params);
      return $.ajax(params);
    };

    PDJSobj.prototype.api_all = function(params, datasofar) {
      if (params == null) {
        params = {};
      }
      if (datasofar == null) {
        datasofar = [];
      }
      params.data = params.data || {};
      params.data.limit = 100;
      params.data.offset = params.data.offset || 0;
      params.final_success = params.final_success || (function(_this) {
        return function(data) {
          return _this.no_success_function(data, params);
        };
      })(this);
      params.incremental_success = params.incremental_success || (function(_this) {
        return function(data) {
          return 0;
        };
      })(this);
      params.success = (function(_this) {
        return function(data) {
          data.res = params.res;
          params.incremental_success(data[params.res]);
          datasofar = datasofar.concat(data[params.res]);
          window.datasofar = datasofar;
          window.d = data;
          if (data.total > data.limit + data.offset) {
            _this.logg("Getting more");
            params.data.offset += params.data.limit;
            return _this.api_all(params, datasofar);
          } else {
            _this.logg("All done");
            _this.logg(params);
            data[params.res] = datasofar;
            data.res = params.res;
            data.offset = 0;
            data.limit = data.total;
            _this.logg(data);
            return params.final_success(data);
          }
        };
      })(this);
      this.logg(params);
      return this.api(params);
    };

    PDJSobj.prototype.event = function(params) {
      if (params == null) {
        params = {};
      }
      this.logg("Create an event");
      params.type = "POST";
      params.url = params.url || this.protocol + "://events." + this.server + "/generic/2010-04-15/create_event.json";
      params.data = params.data || {};
      params.data.service_key = params.data.service_key || params.service_key || this.logg("No service key");
      params.data.event_type = params.data.event_type || params.event_type || "trigger";
      if (params.client) {
        params.data.client = params.data.client || params.client;
      }
      if (params.client_url) {
        params.data.client_url = params.data.client_url || params.client_url;
      }
      params.data.description = params.data.description || params.description || "No description provided";
      params.data.details = params.data.details || params.details || {};
      params.data = JSON.stringify(params.data);
      params.contentType = "application/json; charset=utf-8";
      params.dataType = "json";
      params.error = params.error || (function(_this) {
        return function(err) {
          return _this.error_function(err, params);
        };
      })(this);
      params.success = params.success || (function(_this) {
        return function(data) {
          return _this.no_success_function(data, params);
        };
      })(this);
      return $.ajax(params);
    };

    PDJSobj.prototype.trigger = function(params) {
      if (params == null) {
        params = {};
      }
      params.event_type = "trigger";
      return this.event(params);
    };

    PDJSobj.prototype.acknowledge = function(params) {
      if (params == null) {
        params = {};
      }
      params.event_type = "acknowledge";
      return this.event(params);
    };

    PDJSobj.prototype.resolve = function(params) {
      if (params == null) {
        params = {};
      }
      params.event_type = "resolve";
      return this.event(params);
    };

    return PDJSobj;

  })();

}).call(this);
